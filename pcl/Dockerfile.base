ARG DOCKER_BASE_IMAGE=ros-docker-base
FROM $DOCKER_BASE_IMAGE
ARG ROS_DISTRO=kinetic
ARG NUM_OF_CORE_TO_BUILD=3
ARG ENABLE_NVIDIA=true

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

#RUN . /root/miniconda/etc/profile.d/conda.sh && \
#    conda update -n base -c defaults conda && \
#    conda create --name pcl && \
#    conda activate pcl && \
#    conda config --prepend channels conda-forge && \
#    conda install -c conda-forge pcl 
#RUN echo ". /root/miniconda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    # echo "export PATH=/root/miniconda/bin/:$PATH" >> ~/.bashrc && \
    # echo "source /root/miniconda/bin/activate pcl" >> ~/.bashrc
#    echo "conda activate pcl" >> ~/.bashrc

RUN apt-get install -y software-properties-common && \
    if [ "$ENABLE_NVIDIA" = "true" ] ; then add-apt-repository ppa:graphics-drivers ; fi && \
    if [ "$ENABLE_NVIDIA" = "true" ] ; then apt-get update ; fi && \
    if [ "$ENABLE_NVIDIA" = "true" ] ; then apt-get install -y nvidia-384 ; fi && \
    if [ "$ENABLE_NVIDIA" != "true" ] ; then echo nvidia Disabled; fi


##########################
# install pcl1.8.1-dev
RUN apt-get update && apt-get -y install \
      software-properties-common \
      libwayland-client0 \
      libset-scalar-perl \
      libgl1-mesa-dev \
      libxcursor-dev \
      libxi-dev \
      libxinerama-dev \
      libxrandr-dev

RUN apt-get -y install \
      libflann-dev \
      libflann1.8 \
      libboost-all-dev \
      libxt-dev \
      libeigen3-dev \
      libqhull* libqhull-dev \
      # message passing interface parallel computing
      mpi-default-dev openmpi-bin openmpi-common \
      libusb-1.0-0-dev freeglut3-dev doxygen graphviz

# Build dependency-VTK      
RUN cd /root && \
    wget http://www.vtk.org/files/release/7.1/VTK-7.1.0.tar.gz && \
    tar -xf VTK-7.1.0.tar.gz && \
    cd VTK-7.1.0 && mkdir build && cd build && \

    cmake .. && \
    make -j $NUM_OF_CORE_TO_BUILD && \
    make install

# PCL install
RUN cd /root && \
    git clone http://github.com/PointCloudLibrary/pcl pcl-trunk 

RUN cd /root && \
    cd pcl-trunk && mkdir build && cd build && \
    apt-get -y install libopenni-dev libopenni2-dev && \
    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_tools=ON .. && \
    make -j $NUM_OF_CORE_TO_BUILD

RUN cd /root/pcl-trunk/build && \
    make install && \
    cd /root && \ 
    echo "export LD_LIBRARY_PATH=/root/catkin_ws/devel/lib:/opt/ros/kinetic/lib:/usr/lib:/usr/local/lib" >> ~/.bashrc && \
    echo "export CPLUS_INCLUDE_PATH=/usr/local/include/pcl-1.8:/usr/local/include/vtk-7.1:/usr/include/eigen3" >> ~/.bashrc && \
    echo "export C_INCLUDE_PATH=$CPLUS_INCLUDE_PATH" >> ~/.bashrc && \
    echo "export PATH=$PATH:/root/pcl-trunk/build/bin" >> ~/.bashrc

RUN apt-get update && \
    apt-get install -y gdb


RUN cd /root && \
    git clone http://github.com/OpenKinect/libfreenect2.git && \
    cd libfreenect2 && \
    apt-get install -y build-essential software-properties-common cmake pkg-config \
      libusb-1.0-0-dev libturbojpeg libjpeg-turbo8-dev \
      libglfw3-dev libopenni2-dev \
    # for intel gpu
    beignet-dev libva-dev libjpeg-dev && \

    mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/freenect2 -Dfreenect2_DIR=$HOME/freenect2/lib/cmake/freenect2 -DENABLE_CXX11=ON && \
    make -j $NUM_OF_CORE_TO_BUILD && \
    make install

RUN apt-get -y install openni2-utils && \
    cd /root/libfreenect2/build && \
    make install-openni2

RUN cd /root/catkin_ws/src && \
    git clone https://github.com/ros-perception/pcl_msgs.git && \
    git clone https://github.com/ros-perception/perception_pcl.git && \
    git clone https://github.com/ros/geometry2.git
RUN cd /root/catkin_ws/src/perception_pcl && \
    rosdep update && \
    apt-get update && \
    apt-get install -y libbullet-dev

ARG PCL_ORIGINAL_VER=1.6.2
ARG PCL_INSTALLED_VER=1.8.1
ARG PCL_CMAKE_VER=1.8

RUN cd /root/catkin_ws/src/perception_pcl && \
    find . -name package.xml -type f -exec sed -i "s|<version>$PCL_ORIGINAL_VER</version>|<version>${PCL_INSTALLED_VER}</version>|g" {} \; && \
    find . -name CMakeLists.txt -type f -exec sed -i "s|find_package(PCL REQUIRED|find_package(PCL $PCL_CMAKE_VER REQUIRED|g" {} \;

RUN cd /root/catkin_ws && \
    source ./devel/setup.bash && \
    catkin_make -j$NUM_OF_CORE_TO_BUILD


RUN apt-get install ros-$ROS_DISTRO-tf2-sensor-msgs

#RUN cd /root && \
#    pip install 'cython==0.25.2' && \
#    git clone https://github.com/strawlab/python-pcl.git && \
#    cd python-pcl && \
#    python setup.py build && \
#    python setup.py install 

#RUN apt-get install libpcl-dev
